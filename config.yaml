env_name: !!str lava                        # Enironment to use, in (lava[_perc, _ng], lava2, lava3, lava4)
agent_name: !!str sarsa_lambda         # the agent name (q_learning, double_q_learning, dyna_q, sarsa, n_step_sarsa)
seed: !!int 12345                           # random initialization seed
no_render: !!bool False                     # Deactivate rendering of environment evaluation
eval_eps: !!int 500                         # After how many episodes to evaluate

agents:
  q_learning:
    env_max_steps: !!int 100                 # Maximal steps in environment before termination.
    episodes: !!int 100_000                   # Number of training episodes
    agent_eps_decay: !!str linear            # Epsilon decay schedule, in (linear, log, const)
    agent_eps: !!float 1.0                   # Epsilon value. Used as start value when decay linear or log. Otherwise constant value.

  double_q_learning:
    env_max_steps: !!int 100                 # Maximal steps in environment before termination.
    episodes: !!int 100_000                   # Number of training episodes
    agent_eps_decay: !!str linear            # Epsilon decay schedule, in (linear, log, const)
    agent_eps: !!float 1.0                   # Epsilon value. Used as start value when decay linear or log. Otherwise constant value.

  sarsa:
    env_max_steps: !!int 100                 # Maximal steps in environment before termination.
    episodes: !!int 100_000                   # Number of training episodes
    agent_eps_decay: !!str linear            # Epsilon decay schedule, in (linear, log, const)
    agent_eps: !!float 1.0                   # Epsilon value. Used as start value when decay linear or log. Otherwise constant value.

  n_step_sarsa:
    env_max_steps: !!int 100                 # Maximal steps in environment before termination.
    episodes: !!int 100_000                   # Number of training episodes
    agent_eps_decay: !!str linear            # Epsilon decay schedule, in (linear, log, const)
    agent_eps: !!float 1.0                   # Epsilon value. Used as start value when decay linear or log. Otherwise constant value.
    n: !!int 5                               # number of steps in n-step SARSA

  sarsa_lambda:
    env_max_steps: !!int 100                 # Maximal steps in environment before termination.
    episodes: !!int 100_000                   # Number of training episodes
    agent_eps_decay: !!str linear            # Epsilon decay schedule, in (linear, log, const)
    agent_eps: !!float 1.0                   # Epsilon value. Used as start value when decay linear or log. Otherwise constant value.
    lambd: !!float 0.9                        # lambda parameter of sarsa(\lambda)
    parallel_eligibility_updates: !!bool False # whether the eligibility trace updates should be performed in serial
                                              # or parallel fashion (parallel only faster for large state spaces)

  dyna_q:
    env_max_steps: !!int 100                 # Maximal steps in environment before termination.
    episodes: !!int 10_000                   # Number of training episodes
    agent_eps_decay: !!str linear            # Epsilon decay schedule, in (linear, log, const)
    agent_eps: !!float 1.0                   # Epsilon value. Used as start value when decay linear or log. Otherwise constant value.
    mem_size: !!int 10_000                   # Memory size
    model_samples: !!int 10                  # Num steps to update with model



envs:
  lava:
    example: !!int 0                         # todo
  lava2:
  lava3:
  lava4: